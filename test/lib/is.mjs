import { is } from '../../src/lib/index.mjs'

export default [
  { fn: is.string('string'), expect: true, info: 'is.string works for strings' },
  { fn: is.string(''), expect: true, info: 'is.string works for empty strings' },
  { fn: is.string(2), expect: false, info: 'is.string works for numbers' },
  { fn: is.string(undefined), expect: false, info: 'is.string works for undefined' },
  { fn: is.string(false), expect: false, info: 'is.string works for false' },
  { fn: is.string(true), expect: false, info: 'is.string works for true' },

  { fn: is.object({ key: 'value' }), expect: true, info: 'is.object works for objects' },
  { fn: is.object({}), expect: true, info: 'is.object works for empty objects' },
  { fn: is.object(2), expect: false, info: 'is.object works for numbers' },
  { fn: is.object([]), expect: false, info: 'is.object works for arrays' },
  { fn: is.object(undefined), expect: false, info: 'is.object works for undefined' },
  { fn: is.object(false), expect: false, info: 'is.object works for false' },
  { fn: is.object(''), expect: false, info: 'is.object works for empty string' },
  { fn: is.object('testing'), expect: false, info: 'is.object works for string' },
  { fn: is.object(new Date()), expect: false, info: 'is.object works for empty Date' },

  { fn: is.buffer(Buffer.from('testing')), expect: true, info: 'is.buffer works for buffers' },
  { fn: is.buffer(Buffer.from('')), expect: true, info: 'is.buffer works for empty buffers' },
  { fn: is.buffer('testing'), expect: false, info: 'is.buffer works for strings' },
  { fn: is.buffer(new Date()), expect: false, info: 'is.buffer works for Date' },
  { fn: is.buffer(2), expect: false, info: 'is.buffer works for numbers' },
  { fn: is.buffer([]), expect: false, info: 'is.buffer works for empty arrays' },
  { fn: is.buffer([1, 2, 3]), expect: false, info: 'is.buffer works for arrays' },
  { fn: is.buffer({}), expect: false, info: 'is.buffer works for empty objects' },
  { fn: is.buffer({ test: true }), expect: false, info: 'is.buffer works for empty objects' },

  { fn: is.empty(0), expect: true, info: 'is.empty works for zero' },
  { fn: is.empty([]), expect: true, info: 'is.empty works for empty array' },
  { fn: is.empty({}), expect: true, info: 'is.empty works for empty array' },
  { fn: is.empty(''), expect: true, info: 'is.empty works for empty array' },
  { fn: is.empty(Buffer.from('')), expect: true, info: 'is.empty works for empty buffer' },
  { fn: is.empty(false), expect: true, info: 'is.empty works for empty array' },
  { fn: is.empty(undefined), expect: true, info: 'is.empty works for undefined' },
  { fn: is.empty(null), expect: true, info: 'is.empty works for null' },
  { fn: is.empty('string'), expect: false, info: 'is.empty works for nonempty string' },
  { fn: is.empty(23), expect: false, info: 'is.empty works for non zero number' },
  { fn: is.empty([23, 5]), expect: false, info: 'is.empty works for nonempty array' },
  { fn: is.empty({ test: true }), expect: false, info: 'is.empty works for nonempty object' },
  {
    fn: is.empty(Buffer.from('testing')),
    expect: false,
    info: 'is.empty works for nonempty buffer',
  },
]
